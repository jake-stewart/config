set nocompatible
let mapleader = " "

" omap <space> <NOP>
omap , <NOP>

" PLUGINS {{{

let g:polyglot_disabled = ['autoindent', 'sensible', 'ftdetect']

call plug#begin("~/.vim/plugged")
" Plug 'justinmk/vim-sneak'
Plug 'machakann/vim-swap'
Plug 'glts/vim-textobj-comment'
Plug 'tpope/vim-commentary'
Plug 'rakr/vim-one'
Plug 'inkarkat/vim-ingo-library'
Plug 'kana/vim-textobj-user'
Plug 'bfrg/vim-cpp-modern'
Plug 'tpope/vim-abolish'
Plug 'sheerun/vim-polyglot'
Plug 'michaeljsmith/vim-indent-object'
Plug 'wellle/targets.vim'
Plug 'machakann/vim-sandwich'
Plug 'junegunn/vim-easy-align'
" Plug 'vim-scripts/EnhancedJumps'
Plug 'chaoren/vim-wordmotion'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
call plug#end()

function! Source(fname) 
    exe "source " . $HOME . "/.vim/" . a:fname
endfunction

call Source("plugin_config/sandwich.vim")
call Source("plugin_config/targets.vim")
call Source("plugin_config/easyalign.vim")
" call Source("plugin_config/enhanced_jumps.vim")
call Source("plugin_config/wordmotion.vim")
call Source("plugin_config/coc.vim")
call Source("plugin_config/fzf.vim")

" }}}

" APPEARANCE {{{


hi Comment gui=italic cterm=italic
hi Todo gui=italic cterm=italic

if &term =~ '^xterm.\(256color\|kitty\)'
    let &t_SI = "\<Esc>[5 q"
    let &t_EI = "\<Esc>[1 q"
    let &t_SR = "\<Esc>[4 q"
endif

" }}}

" SETTINGS {{{

" title
set title
set titlestring=%t%(\ %M%)%(\ %a%)

" colorscheme
set background=dark
set termguicolors
syntax on
colorscheme custom

set shortmess+=I   " remove start page
set showmatch
set guioptions=c!  " remove gvim widgets
set noshowmode     " hide --INSERT--
set laststatus=0   " hide statusbar
set ruler
set number
set cursorline
set belloff=all    " disable sound
set showmatch
set nojoinspaces   " stop double space when joining sentences

set noswapfile

" splits
set splitright
set splitbelow

" whitespace
set tabstop=8
set expandtab
set softtabstop=4
set shiftwidth=4
set smarttab

if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undodir")
    call mkdir($HOME."/.vim/undodir", "", 0700)
endif

set undodir=~/.vim/undodir
set undofile
set undolevels=5000

" searching
set hlsearch
set incsearch
set smartcase
set ignorecase

" other
set foldmethod=marker               " use {{{ and }}} for folding
set lazyredraw                      " run macros without updating screen
set clipboard^=unnamed,unnamedplus  " make vim use system clipboard
set encoding=utf-8                  " unicode characters
set hidden                          " allow buffer switching without saving
set backspace=indent,eol,start      " make backspace work as expected
set mouse=a                         " enable mouse
set ttimeoutlen=1                   " time waited for terminal codes
set signcolumn=number
" set linebreak
" set breakindent
" set breakindentopt=shift:8
" set cursorlineopt=screenline

" }}}

" AUTOCOMMANDS {{{

" remove autocommenting
autocmd FileType * setlocal fo-=c fo-=r fo-=o

" go to last position before exiting vim
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" }}}

" MAPPINGS {{{

nnoremap <silent>t :noh<CR>

nnoremap <c-d> M10jzz
nnoremap <c-u> M10kzz

map gh ^
map gl $

nnoremap Y y$
nnoremap Q @q

" inoremap {<CR> {<cr>}<esc>O
inoremap  <esc>A <esc>ciw {<CR>}<esc>O

" nnoremap <silent><space>l /\v[\[({]<CR>:noh<CR>
" nnoremap <silent><space>h ?\v[\[({]<CR>:noh<CR>
" nnoremap ( F(
" nnoremap ) f)
" nnoremap <silent>) /\v[\[({]<CR>:noh<CR>
" nnoremap <silent>( ?\v[\[({]<CR>:noh<CR>

nnoremap <silent>)  :call search("(", "W")<CR>
nnoremap <silent>(  :call search("(", "Wb")<CR>
nnoremap <silent>g) :call search("\v[\[({]", "W")<CR>
nnoremap <silent>g( :call search("\v[\[({]", "Wb")<CR>
nnoremap <silent>g] :call search("[", "W")<CR>
nnoremap <silent>g[ :call search("[", "Wb")<CR>
nnoremap <silent>g} :call search("{", "W")<CR>
nnoremap <silent>g{ :call search("{", "Wb")<CR>

" toggle cursor column 
nnoremap <silent>,c :exec &cuc ? "set nocuc" : "set cuc"<CR>

" map <c-k>zs to zero-width space
exe 'digraph zs ' . 0x200b

" }}}

call Source("functions/smartquit.vim")
call Source("functions/paragraphjump.vim")
" call Source("functions/sectionjump.vim")
call Source("functions/bettersneak.vim")
call Source("functions/synstack.vim")
call Source("functions/slide.vim")
call Source("functions/tabline.vim")
call Source("functions/fcd.vim")

function! JumpOutFile()
    let l:current_file = expand("%:p")
    if l:current_file != ""
        while l:current_file == expand("%:p")
            exe "norm \<C-o>"
        endwhile
    endif
    f
endfunction

function! JumpInFile()
    let l:current_file = expand("%:p")
    while l:current_file == expand("%:p")
        exe "norm \<C-i>"
    endwhile
    f
endfunction

" nnoremap <silent><leader>o :call JumpOutFile()<CR>
" nnoremap <silent><leader>i :call JumpInFile()<CR>
nnoremap <silent><leader>o <C-o>
nnoremap <silent><leader>i <C-i>
