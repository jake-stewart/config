
" COMPATIBILITY

set nocompatible

if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end

if &term == "st-256color"
    let &t_SI = "\<Esc>[5 q"
    let &t_EI = "\<Esc>[1 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    let &t_Cs = "\e[4:3m"
    let &t_Ce = "\e[4:0m"
endif

" tmux
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-w>h :TmuxNavigateLeft<cr>
nnoremap <silent> <c-w>j :TmuxNavigateDown<cr>
nnoremap <silent> <c-w>k :TmuxNavigateUp<cr>
nnoremap <silent> <c-w>l :TmuxNavigateRight<cr>

command! TmuxQuit call TmuxQuit()
nnoremap <silent> <c-w>q :TmuxQuit<CR>


function! TmuxQuit()
    if &modified
        echo "Error: Buffer is modified"
        return
    endif
    if win_getid(2) == 0
        !tmux killp
    else
        quit
    endif
endfunction


" APPEARANCE

set background=dark
set termguicolors
syntax on
colorscheme custom

set shortmess+=I   " remove start page
set guioptions=c!  " remove gvim widgets
set noshowmode     " hide --INSERT--
set laststatus=0   " hide statusbar
set ruler
set number
set cursorline
set belloff=all    " disable sound
set showcmd

hi Comment gui=italic cterm=italic
hi Todo gui=italic cterm=italic


" SETTINGS

set noswapfile

" splits
set splitright
set splitbelow

" whitespace
set tabstop=8
set softtabstop=0
set expandtab
set shiftwidth=4
set smarttab

" persistant undo
exe "set undodir=" . fnamemodify($MYVIMRC, ":h") . "/undodir"
set undofile

" searching
set hlsearch
set incsearch
set smartcase
set ignorecase

" other
set lazyredraw                     " run macros without updating screen
set clipboard^=unnamed,unnamedplus " make vim use system clipboard
set encoding=utf-8                 " unicode characters
set hidden                         " allow buffer switching without saving
set backspace=indent,eol,start     " make backspace work as expected
set mouse=a                        " enable mouse
set ttimeoutlen=1                  " time waited for terminal codes


" PLUGINS

let g:polyglot_disabled = ['autoindent', 'sensible', 'ftdetect']

" vimplug
call plug#begin("~/.vim/plugged")
Plug 'christoomey/vim-tmux-navigator'
Plug 'machakann/vim-swap'
Plug 'glts/vim-textobj-comment'
Plug 'tpope/vim-commentary'
Plug 'kana/vim-textobj-user'
Plug 'sheerun/vim-polyglot'
Plug 'michaeljsmith/vim-indent-object'
Plug 'wellle/targets.vim'
Plug 'machakann/vim-sandwich'
Plug 'junegunn/vim-easy-align'
Plug 'itchyny/lightline.vim'
call plug#end()


" OTHER PLUGIN SETTINGS

" vim-easy-align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" lightline.vim
let g:lightline = {'colorscheme': 'darcula'}

" vim-sandwich
runtime macros/sandwich/keymap/surround.vim

" targets.vim
autocmd User targets#mappings#user call targets#mappings#extend({
    \ 'b': {'pair': [{'o':'(', 'c':')'}]}
    \ })
nmap cia cIa
nmap dia dIa
nmap yia yIa


" AUTOCOMMANDS

autocmd BufNewFile,BufRead *.jn setf jnote
autocmd BufNewFile,BufRead *.tbl setf tablescript
autocmd FileType * setlocal fo-=c fo-=r fo-=o  " remove autocommenting

" go to last position before exiting vim
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif


" MAPPINGS

" remove search highlighting
nnoremap <silent><space> :noh<CR>

" toggle cursor column 
nnoremap <silent><leader>c :exec &cuc ? "set nocuc" : "set cuc"<CR>

" Make Y act like C and D
nnoremap Y y$

" Replace Ex mode with run q macro
nnoremap Q @q

" map <c-k>zs to zero-width space
exe 'digraph zs ' . 0x200b
