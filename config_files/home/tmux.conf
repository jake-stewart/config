#
#  _____                     
# |_   _| __ ___  _   ___  __
#   | || '_ ` _ \| | | \ \/ /
#   | || | | | | | |_| |>  < 
#   |_||_| |_| |_|\__,_/_/\_\
#

# COMPATABILITY {{{

# set -gq default-terminal "xterm-256color"
# set -ag terminal-overrides ",xterm-256color:Tc,alacritty:RGB"
set -g default-terminal "${TERM}"

# }}}
# MISC OPTIONS {{{

set -g detach-on-destroy off  # open existing session when closing last window
set -s escape-time 0          # remove delay for escape
set -g status-keys emacs      # allows esc key to exit commandline mode
set -g renumber-windows on    # stop new tabs appearing behind last

# }}}
# MOUSE {{{

set -g mouse on
unbind -n MouseDown3Pane  # remove default right-click context menu
bind -n MouseDown2Pane if -F "#{mouse_any_flag}" "send-keys -M MouseDown2" pasteb

# }}}
# TITLE {{{

set -g set-titles on
set -g set-titles-string "#T"

# }}}
# POPUP WINDOWS {{{

set -g popup-border-style "fg=#404350"
set -g pane-border-style "fg=#404350"
set -g pane-active-border-style 'fg=#404350'
set -g popup-border-lines rounded

# }}}
# COMMAND PROMPT {{{

set -g message-style "bg=default"
set -g message-command-style "bg=default"

# }}}
# STATUS LINE {{{

set -g status-style "bg=default"
set -g window-status-style ""
set -g window-status-current-style ""
set -g window-status-separator ""

set -g status-left-length 100
set -g status-right-length 100
set -g status-interval 30

set -g window-status-separator "#[fg=brightblack] | #[fg=default]"
set -g window-status-format "#W"
set -g window-status-current-format "#[fg=green]#W"

set -g status-left ""
set -g status-right "#(~/.bin/status '#T' '#{pane_current_path}' '#S')"

# }}}
# KEYBINDS {{{

set -g prefix M-g
set-window-option -g mode-keys vi

# NAVIGATION
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R
bind -n M-H select-pane -L
bind -n M-J select-pane -D
bind -n M-K select-pane -U
bind -n M-L select-pane -R

# RESIZING
bind -n M-H resize-pane -L 5
bind -n M-J resize-pane -D 5
bind -n M-K resize-pane -U 5
bind -n M-L resize-pane -R 5
bind -n M-Y resize-pane -L
bind -n M-U resize-pane -D
bind -n M-I resize-pane -U
bind -n M-O resize-pane -R

# SWAPPING
bind h splitw -fhb \; swapp -t ! \; killp -t !
bind j splitw -fv  \; swapp -t ! \; killp -t !
bind k splitw -fvb \; swapp -t ! \; killp -t !
bind l splitw -fh  \; swapp -t ! \; killp -t !
bind M-h splitw -fhb \; swapp -t ! \; killp -t !
bind M-j splitw -fv  \; swapp -t ! \; killp -t !
bind M-k splitw -fvb \; swapp -t ! \; killp -t !
bind M-l splitw -fh  \; swapp -t ! \; killp -t !

# SPLITTING
bind -n M-n split-window -h -c "#{pane_current_path}"
bind -n M-b split-window -v -c "#{pane_current_path}"
bind M-b break-pane

# NAVIGATING TABS (ctrl/ctrl+shift + tab)
set -s user-keys[0] "\e[1;5I"
set -s user-keys[1] "\e[1;6I"
bind -n User0 next-window
bind -n User1 previous-window

# SWAPPING TABS (ctrl+shift + pageup/pagedown)
set -s user-keys[2] "\e[5;6~"
set -s user-keys[3] "\e[6;6~"
bind -n User2 swap-window -t -1 \; previous-window
bind -n User3 swap-window -t +1 \; next-window

# COPY MODE
bind -n M-v copy-mode
bind -n M-Escape copy-mode
bind -T copy-mode-vi a send -X cancel
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi u send -X halfpage-up
bind -T copy-mode-vi d send -X halfpage-down
bind -T copy-mode-vi M-u send -X halfpage-up
bind -T copy-mode-vi M-d send -X halfpage-down
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"

# SCROLL
bind -n M-u copy-mode \; send -X halfpage-up
bind -n M-d copy-mode \; send -X halfpage-down

# MISC
bind -n M-t new-window -c "#{session_path}"      # new tab
bind -n M-w killp                                # kill pane
bind -n 'M-;' switch-client -l                   # switch previous session
bind -n M-6 switch-client -l                     # switch previous session
bind -n M-: command-prompt                       # command prompt
bind -n M-p pasteb                               # paste clipboard
bind    M-s source ~/.tmux.conf                  # source tmux config
bind    M-f choose-tree -s -Z                    # tmux session tree
bind    M-m command-prompt -I "move-window -t "  # move window to session
bind    M-r command-prompt -I "rename-session "  # rename session
bind    r command-prompt -I "rename-window "     # rename window


# }}}
# POPUP WINDOWS {{{

EXEC="exec $SHELL -lc"

# PYTHON PROMPT
bind M-p display-popup -E "$EXEC ~/.bin/py"

# JFIND NEW SESSION
bind M-n display-popup -E "$EXEC ~/.config/tmux/new-session.sh"

# JFIND EXISTING SESSION
bind -n M-f display-popup -E "$EXEC ~/.config/tmux/switch-session.sh"

# POPUP TERMINAL
COMMAND='cd $(tmux display -p "#{pane_current_path}"); $SHELL -l'
bind M-g display-popup -E "$EXEC '$COMMAND'"

# }}}

# vim: foldmethod=marker
