"        _                                       
" __   _(_)_ __ ___  _ __   __ _  __ _  ___ _ __ 
" \ \ / / | '_ ` _ \| '_ \ / _` |/ _` |/ _ \ '__|
"  \ V /| | | | | | | |_) | (_| | (_| |  __/ |   
"   \_/ |_|_| |_| |_| .__/ \__,_|\__, |\___|_|   
"                   |_|          |___/           
"


" COMPATIBILITY

set nocompatible

if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end

if &term == "st-256color"
    let &t_SI = "\<Esc>[5 q"
    let &t_EI = "\<Esc>[1 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" tmux
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-w>h :TmuxNavigateLeft<cr>
nnoremap <silent> <c-w>j :TmuxNavigateDown<cr>
nnoremap <silent> <c-w>k :TmuxNavigateUp<cr>
nnoremap <silent> <c-w>l :TmuxNavigateRight<cr>
nnoremap <c-w>q :q<CR>


" APPEARANCE
set background=dark
set termguicolors
syntax on
colorscheme custom

set shortmess+=I   " remove start page
set guioptions=c!  " remove gvim widgets
set noshowmode     " hide --INSERT--
set laststatus=0   " hide statusbar
set noruler
set nonumber
set nocursorline
set belloff=all    " disable sound
set noshowcmd

hi Comment gui=italic cterm=italic
hi Todo gui=italic cterm=italic


" SETTINGS

" searching
set smartcase
set ignorecase
set incsearch
set hlsearch

" other
set mouse=a
set scrolloff=0
set timeoutlen=0
set ttimeoutlen=0
set wrapscan


" PLUGINS

call plug#begin("~/.vim/plugged")
Plug 'christoomey/vim-tmux-navigator'
call plug#end()


" AUTOCOMMANDS

" make cursor come back when in terminal/command line mode
au VimSuspend * set t_ve&vim
au BufWinEnter,WinEnter * if &buftype == 'terminal' | set t_ve&vim | else | set t_ve= | endif
au TerminalWinOpen * set t_ve&vim
au CmdLineEnter * set t_ve&vim
au CmdLineLeave * if &buftype != 'terminal' | set t_ve= | endif



" FIX VIM PAGER
" why is this an autocommand?
" to stop vimpager overwriting mappings
" so we overwrite their mappings after startup instead
au VimEnter * call FixVimpager()

function FixVimpager()

    " stop this function running again
    au! VimEnter

    " make vim enter/leave hide cursor
    au VimEnter * set t_ve= scrolloff=0 wrapscan
    au VimLeave * set t_ve&vim

    " remove status line
    function! StatusFunction()
    endfunction
    let g:less = {"statusfunc": function("StatusFunction")}

    nnoremap <buffer><silent><space> :noh<CR>

    " unbind everything that isnt needed
    " some things need to use <buffer> because vimpager
    " is annoying and binds things with <buffer>
    noremap <buffer>v <NOP>

    nnoremap <C-]>    <NOP>
    noremap a         <NOP>
    noremap c         <NOP>
    noremap e         <NOP>
    noremap h         <NOP>
    noremap i         <NOP>
    noremap l         <NOP>
    noremap m         <NOP>
    noremap o         <NOP>
    noremap p         <NOP>
    noremap r         <NOP>
    noremap s         <NOP>
    noremap t         <NOP>
    noremap w         <NOP>
    noremap x         <NOP>
    noremap y         <NOP>
    noremap z         <NOP>
    noremap A         <NOP>
    noremap B         <NOP>
    noremap C         <NOP>
    noremap D         <NOP>
    noremap E         <NOP>
    noremap F         <NOP>
    noremap H         <NOP>
    noremap I         <NOP>
    noremap J         <NOP>
    noremap K         <NOP>
    noremap L         <NOP>
    noremap M         <NOP>
    noremap O         <NOP>
    noremap P         <NOP>
    noremap Q         <NOP>
    noremap R         <NOP>
    noremap S         <NOP>
    noremap T         <NOP>
    noremap U         <NOP>
    noremap V         <NOP>
    noremap W         <NOP>
    noremap X         <NOP>
    noremap Y         <NOP>
    noremap Z         <NOP>
    noremap 1         <NOP>
    noremap 2         <NOP>
    noremap 3         <NOP>
    noremap 4         <NOP>
    noremap 5         <NOP>
    noremap 6         <NOP>
    noremap 7         <NOP>
    noremap 8         <NOP>
    noremap 9         <NOP>
    noremap 0         <NOP>
    noremap -         <NOP>
    noremap =         <NOP>
    noremap [         <NOP>
    noremap ]         <NOP>
    noremap <bslash>  <NOP>
    noremap ;         <NOP>
    noremap '         <NOP>
    noremap ,         <NOP>
    noremap .         <NOP>
    noremap `         <NOP>
    noremap <!>       <NOP>
    noremap @         <NOP>
    noremap #         <NOP>
    noremap $         <NOP>
    noremap %         <NOP>
    noremap ^         <NOP>
    noremap &         <NOP>
    noremap *         <NOP>
    noremap (         <NOP>
    noremap )         <NOP>
    noremap _         <NOP>
    noremap +         <NOP>
    noremap {         <NOP>
    noremap }         <NOP>
    noremap <bar>     <NOP>
    "noremap :         <NOP>
    noremap "         <NOP>
    noremap <         <NOP>
    noremap >         <NOP>
    noremap ~         <NOP>
endfunction

" vim: ft=vim
